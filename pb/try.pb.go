// Code generated by protoc-gen-go. DO NOT EDIT.
// source: try.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TryRequest) Reset()         { *m = TryRequest{} }
func (m *TryRequest) String() string { return proto.CompactTextString(m) }
func (*TryRequest) ProtoMessage()    {}
func (*TryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d897dfb14a346df, []int{0}
}

func (m *TryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TryRequest.Unmarshal(m, b)
}
func (m *TryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TryRequest.Marshal(b, m, deterministic)
}
func (m *TryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TryRequest.Merge(m, src)
}
func (m *TryRequest) XXX_Size() int {
	return xxx_messageInfo_TryRequest.Size(m)
}
func (m *TryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TryRequest proto.InternalMessageInfo

func (m *TryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NotifyMes struct {
	Content              string                          `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Details              *any.Any                        `protobuf:"bytes,2,opt,name=Details,proto3" json:"Details,omitempty"`
	UserList             map[string]*timestamp.Timestamp `protobuf:"bytes,3,rep,name=UserList,proto3" json:"UserList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *NotifyMes) Reset()         { *m = NotifyMes{} }
func (m *NotifyMes) String() string { return proto.CompactTextString(m) }
func (*NotifyMes) ProtoMessage()    {}
func (*NotifyMes) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d897dfb14a346df, []int{1}
}

func (m *NotifyMes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyMes.Unmarshal(m, b)
}
func (m *NotifyMes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyMes.Marshal(b, m, deterministic)
}
func (m *NotifyMes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyMes.Merge(m, src)
}
func (m *NotifyMes) XXX_Size() int {
	return xxx_messageInfo_NotifyMes.Size(m)
}
func (m *NotifyMes) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyMes.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyMes proto.InternalMessageInfo

func (m *NotifyMes) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NotifyMes) GetDetails() *any.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *NotifyMes) GetUserList() map[string]*timestamp.Timestamp {
	if m != nil {
		return m.UserList
	}
	return nil
}

type Address struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d897dfb14a346df, []int{2}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*TryRequest)(nil), "pb.TryRequest")
	proto.RegisterType((*NotifyMes)(nil), "pb.NotifyMes")
	proto.RegisterMapType((map[string]*timestamp.Timestamp)(nil), "pb.NotifyMes.UserListEntry")
	proto.RegisterType((*Address)(nil), "pb.Address")
}

func init() { proto.RegisterFile("try.proto", fileDescriptor_4d897dfb14a346df) }

var fileDescriptor_4d897dfb14a346df = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0xce, 0x12, 0x31,
	0x14, 0xc5, 0xd3, 0x22, 0x20, 0x97, 0x40, 0x4c, 0x63, 0xc2, 0x38, 0x62, 0x24, 0xb3, 0x22, 0x26,
	0x76, 0x10, 0x17, 0x1a, 0x76, 0xf8, 0x27, 0x81, 0x04, 0x95, 0x8c, 0x18, 0x97, 0xa6, 0xe3, 0x14,
	0xd2, 0x38, 0xb4, 0x63, 0x7b, 0x21, 0xce, 0xd6, 0x57, 0xf0, 0x21, 0x7c, 0x20, 0x5f, 0xc1, 0xc4,
	0xd7, 0x30, 0xcc, 0x1f, 0x94, 0xef, 0xdb, 0x7c, 0xbb, 0xde, 0x9c, 0x5f, 0xcf, 0x3d, 0xf7, 0x40,
	0x07, 0x6d, 0xce, 0x33, 0x6b, 0xd0, 0x30, 0x9a, 0xc5, 0xfe, 0x70, 0x67, 0xcc, 0x2e, 0x95, 0xa1,
	0xc8, 0x54, 0x28, 0xb4, 0x36, 0x28, 0x50, 0x19, 0xed, 0x4a, 0xc2, 0xbf, 0x57, 0xa9, 0xc5, 0x14,
	0x1f, 0xb6, 0xa1, 0xd0, 0xd5, 0x67, 0xff, 0xe1, 0x55, 0x09, 0xd5, 0x5e, 0x3a, 0x14, 0xfb, 0xac,
	0x04, 0x82, 0x21, 0xc0, 0xc6, 0xe6, 0x91, 0xfc, 0x7a, 0x90, 0x0e, 0x59, 0x1f, 0xa8, 0x4a, 0x3c,
	0x32, 0x22, 0xe3, 0x4e, 0x44, 0x55, 0x12, 0xfc, 0x21, 0xd0, 0x79, 0x6b, 0x50, 0x6d, 0xf3, 0x37,
	0xd2, 0x31, 0x0f, 0xda, 0x2f, 0x8d, 0x46, 0xa9, 0xb1, 0x42, 0xea, 0x91, 0x71, 0x68, 0xbf, 0x92,
	0x28, 0x54, 0xea, 0x3c, 0x3a, 0x22, 0xe3, 0xee, 0xf4, 0x2e, 0x2f, 0x17, 0xf3, 0x7a, 0x31, 0x9f,
	0xeb, 0x3c, 0xaa, 0x21, 0xf6, 0x0c, 0x6e, 0x7f, 0x70, 0xd2, 0xae, 0x94, 0x43, 0xaf, 0x31, 0x6a,
	0x8c, 0xbb, 0xd3, 0xfb, 0x3c, 0x8b, 0xf9, 0x79, 0x15, 0xaf, 0xd5, 0xd7, 0x1a, 0x6d, 0x1e, 0x9d,
	0x61, 0xff, 0x23, 0xf4, 0x2e, 0x24, 0x76, 0x07, 0x1a, 0x5f, 0x64, 0x5e, 0xe5, 0x39, 0x3d, 0xd9,
	0x04, 0x9a, 0x47, 0x91, 0x1e, 0x64, 0x95, 0xc4, 0xbf, 0x96, 0x64, 0x53, 0x57, 0x10, 0x95, 0xe0,
	0x8c, 0x3e, 0x27, 0xc1, 0x63, 0x68, 0xcf, 0x93, 0xc4, 0x4a, 0xe7, 0x4e, 0x25, 0x2c, 0xd7, 0x75,
	0x09, 0xcb, 0x35, 0x63, 0x70, 0x6b, 0x6d, 0x2c, 0x16, 0x7e, 0xcd, 0xa8, 0x78, 0x4f, 0x7f, 0x92,
	0xa2, 0xb7, 0xf7, 0xd2, 0x1e, 0xd5, 0x67, 0xc9, 0x16, 0xd0, 0x2a, 0xb3, 0xb3, 0xfe, 0xe9, 0x8e,
	0x7f, 0x8d, 0xfa, 0xbd, 0x8b, 0xbb, 0x82, 0x07, 0xdf, 0x7f, 0xfd, 0xfe, 0x41, 0x07, 0x01, 0x0b,
	0x8f, 0x4f, 0x42, 0xf9, 0x4d, 0xec, 0xb3, 0x54, 0x86, 0xba, 0x90, 0x67, 0xe4, 0xd1, 0x84, 0xb0,
	0x77, 0x00, 0x2b, 0xe1, 0xf0, 0x66, 0x6e, 0x41, 0xe1, 0x36, 0x0c, 0x06, 0xff, 0xbb, 0xa5, 0xc2,
	0xe1, 0xa7, 0xb3, 0xe5, 0x0b, 0xba, 0xa0, 0x71, 0xab, 0xb8, 0xfd, 0xe9, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0x35, 0xd2, 0x04, 0x56, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TryServiceClient is the client API for TryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TryServiceClient interface {
	Notify(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (TryService_NotifyClient, error)
	LastNotify(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*NotifyMes, error)
}

type tryServiceClient struct {
	cc *grpc.ClientConn
}

func NewTryServiceClient(cc *grpc.ClientConn) TryServiceClient {
	return &tryServiceClient{cc}
}

func (c *tryServiceClient) Notify(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (TryService_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TryService_serviceDesc.Streams[0], "/pb.TryService/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &tryServiceNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TryService_NotifyClient interface {
	Recv() (*NotifyMes, error)
	grpc.ClientStream
}

type tryServiceNotifyClient struct {
	grpc.ClientStream
}

func (x *tryServiceNotifyClient) Recv() (*NotifyMes, error) {
	m := new(NotifyMes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tryServiceClient) LastNotify(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*NotifyMes, error) {
	out := new(NotifyMes)
	err := c.cc.Invoke(ctx, "/pb.TryService/LastNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TryServiceServer is the server API for TryService service.
type TryServiceServer interface {
	Notify(*TryRequest, TryService_NotifyServer) error
	LastNotify(context.Context, *TryRequest) (*NotifyMes, error)
}

func RegisterTryServiceServer(s *grpc.Server, srv TryServiceServer) {
	s.RegisterService(&_TryService_serviceDesc, srv)
}

func _TryService_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TryServiceServer).Notify(m, &tryServiceNotifyServer{stream})
}

type TryService_NotifyServer interface {
	Send(*NotifyMes) error
	grpc.ServerStream
}

type tryServiceNotifyServer struct {
	grpc.ServerStream
}

func (x *tryServiceNotifyServer) Send(m *NotifyMes) error {
	return x.ServerStream.SendMsg(m)
}

func _TryService_LastNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).LastNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TryService/LastNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).LastNotify(ctx, req.(*TryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TryService",
	HandlerType: (*TryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastNotify",
			Handler:    _TryService_LastNotify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _TryService_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "try.proto",
}
